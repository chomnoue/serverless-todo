service: serverless-todo-app
variablesResolutionMode: 20210219
configValidationMode: error
plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  tracing:
    apiGateway: true
    lambda: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    JWKS_URL: ${opt:jwksUrl, 'https://chomnoue.auth0.com/.well-known/jwks.json'}
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATION_DATE_INDEX: CreatedAtIndex
    TODOS_DUE_DATE_INDEX: DueDateIndex
    ATTACHMENTS_BUCKET: chomnoue-serverless-todos-attachments-${self:provider.stage}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    role: GetTodosRole

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(create_todo_request.json)}
    role: CreateTodoRole

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(update_todo_request.json)}
    role: UpdateTodoRole

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    role: DeleteTodoRole

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    role: GenerateUploadUrlRole

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TodosDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: dueDate
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATION_DATE_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.TODOS_DUE_DATE_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: dueDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    GetTodosRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: &assumeRolePolicyDocument
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: getTodosPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - &logsStatement
                  Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        -
                          - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - &xrayStatement
                  Effect: "Allow" # xray permissions (required)
                  Action:
                    - "xray:PutTraceSegments"
                    - "xray:PutTelemetryRecords"
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                  Resource:
                    - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_CREATION_DATE_INDEX}
                    - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_DUE_DATE_INDEX}
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*

    CreateTodoRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: createTodoPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*

    UpdateTodoRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: updateTodoPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

    DeleteTodoRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: deleteTodoPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

    GenerateUploadUrlRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: generateUploadUrlPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*
